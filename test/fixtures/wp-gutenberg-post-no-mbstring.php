<?php
/**
 * Generated by Peggy 5.0.0 with PHPeggy plugin 2.0.1
 *
 * https://peggyjs.org/
 * https://github.com/marcelbolten/phpeggy
 */

declare(strict_types=1);

namespace PHPeggy;

/* BEGIN Utility functions */
/* chr_unicode - get unicode character from its char code */
if (!\function_exists("PHPeggy\\chr_unicode")) {
    /** @param float|int $code */
    function chr_unicode(
        $code
    ): string {
        return \html_entity_decode("&#" . (int) $code . ";", ENT_QUOTES, "UTF-8");
    }
}

/* ord_unicode - get unicode char code from string */
if (!\function_exists("PHPeggy\\ord_unicode")) {
    function ord_unicode(
        string $character
    ): int {
        if (\strlen($character) === 1) {
            return \ord($character);
        }
        $json = \json_encode($character, \JSON_THROW_ON_ERROR);
        $utf16_1 = (int) \hexdec(\substr($json, 3, 4));
        if (substr($json, 7, 2) === "\u") {
            $utf16_2 = (int) \hexdec(\substr($json, 9, 4));
            return 0x10000 + (($utf16_1 & 0x3ff) << 10) + ($utf16_2 & 0x3ff);
        }

        return $utf16_1;
    }
}

/* peg_char_class_test - simple character class test */
if (!\function_exists("PHPeggy\\peg_char_class_test")) {
    /** @param array<int, array<int, int>> $class */
    function peg_char_class_test(
        array $class,
        string $character
    ): bool {
        $code = ord_unicode($character);
        foreach ($class as $range) {
            if ($code >= $range[0] && $code <= $range[1]) {
                return true;
            }
        }

        return false;
    }
}
/* END Utility functions */

/* Syntax error exception */
if (!\class_exists("PHPeggy\\SyntaxError", false)) {
    class SyntaxError extends \Exception
    {
        public string $name = "SyntaxError";

        /**
         * @param pegExpectation[]|null $expected
         */
        public function __construct(
            ?string $message,
            public ?array $expected,
            public string $found,
            public int $grammarOffset,
            public int $grammarLine,
            public int $grammarColumn,
            public pegLocation $location
        ) {
            parent::__construct($message ?? "", 0);
        }

        /**
         * @param array<int, array<string, string>> $sources
         */
        public function format(
            array $sources
        ): string {
            $str = $this->name . ": " . $this->message;
            if (!empty($this->location->source)) {
                $src = null;
                for ($k = 0; $k < \count($sources); $k++) {
                    if ($sources[$k]["source"] === $this->location->source) {
                        $src = \preg_split("/\r\n|\n|\r/", $sources[$k]["text"]);
                        break;
                    }
                }
                $start = $this->location->start;
                $loc = $this->location->source . ":" . $start->line . ":" . $start->column;
                if ($src) {
                    $end = $this->location->end;
                    $filler = $this->peg_padEnd("", $start->line !== 0 ? (int) \floor(\log10($start->line) + 1) : 1);
                    $line = $src[$start->line - 1];
                    $last = $start->line === $end->line ? $end->column : \strlen($line) + 1;
                    $hatLen = ($last - $start->column) ?: 1;
                    $str .= "\n --> " . $loc . "\n"
                        . $filler . " |\n"
                        . $start->line . " | " . $line . "\n"
                        . $filler . " | " . $this->peg_padEnd("", $start->column - 1)
                        . $this->peg_padEnd("", $hatLen, "^");
                } else {
                    $str .= "\n at " . $loc;
                }
            }
            return $str;
        }

        private function peg_padEnd(
            string $str,
            int $targetLength,
            string $padString = " "
        ): string {
            if (\strlen($str) > $targetLength) {
                return $str;
            }
            $targetLength -= \strlen($str);
            $padString .= \str_repeat($padString, $targetLength);
            return $str . \substr($padString, 0, $targetLength);
        }
    }
}

if (!\class_exists("PHPeggy\\pegExpectation", false)) {
    class pegExpectation
    {
        public function __construct(
            public ?string $type = null,
            public ?string $description = null,
            public ?string $value = null,
            public ?string $ignoreCase = null
        ) {
        }
    }
}

if (!\class_exists("PHPeggy\\pegCacheItem", false)) {
    class pegCacheItem
    {
        public function __construct(
            public int $nextPos,
            public mixed $result
        ) {
        }
    }
}

if (!\class_exists("PHPeggy\\pegCachedPosDetails", false)) {
    class pegCachedPosDetails
    {
        public function __construct(
            public int $line = 1,
            public int $column = 1,
            public bool $seenCR = false
        ) {
        }
    }
}

if (!\class_exists("PHPeggy\\pegLocation", false)) {
    class pegLocation
    {
        public function __construct(
            public string $source,
            public pegPosition $start,
            public pegPosition $end
        ) {
        }
    }
}

if (!\class_exists("PHPeggy\\pegPosition", false)) {
    class pegPosition
    {
        public function __construct(
            public int $offset,
            public int $line,
            public int $column
        ) {
        }
    }
}

if (!\class_exists("PHPeggy\\pegRange", false)) {
    class pegRange
    {
        public function __construct(
            public string $source,
            public int $start,
            public int $end
        ) {
        }
    }
}

class Parser
{
    private int $peg_currPos = 0;
    private int $peg_reportedPos = 0;
    private int $peg_cachedPos = 0;
    private pegCachedPosDetails $peg_cachedPosDetails;
    private int $peg_maxFailPos = 0;
    /** @var pegExpectation[] $peg_maxFailExpected */
    private array $peg_maxFailExpected = [];
    private int $peg_silentFails = 0;
    /** @var string[] $input */
    private array $input = [];
    /** @var array<string, mixed> $options */
    private array $options = [];
    private int $input_length = 0;
    private \stdClass $peg_FAILED;
    private string $peg_source = "";

    private string $peg_l0 = "<!--";
    private string $peg_l1 = "more";
    private string $peg_l2 = "-->";
    private string $peg_l3 = "<!--noteaser-->";
    private string $peg_l4 = "wp:";
    private string $peg_l5 = "/-->";
    private string $peg_l6 = "/wp:";
    private string $peg_l7 = "/";
    private string $peg_l8 = "{";
    private string $peg_l9 = "}";
    /** @var array<int, array<int, int>> $peg_c0 */
    private array $peg_c0 = [[97,122]];
    /** @var array<int, array<int, int>> $peg_c1 */
    private array $peg_c1 = [[97,122], [48,57], [95,95], [45,45]];
    /** @var array<int, array<int, int>> $peg_c2 */
    private array $peg_c2 = [[32,32], [9,9], [13,13], [10,10]];
    private pegExpectation $peg_e0;
    private pegExpectation $peg_e1;
    private pegExpectation $peg_e2;
    private pegExpectation $peg_e3;
    private pegExpectation $peg_e4;
    private pegExpectation $peg_e5;
    private pegExpectation $peg_e6;
    private pegExpectation $peg_e7;
    private pegExpectation $peg_e8;
    private pegExpectation $peg_e9;
    private pegExpectation $peg_e10;
    private pegExpectation $peg_e11;
    private pegExpectation $peg_e12;
    private pegExpectation $peg_e13;

    public function __construct()
    {
        $this->peg_FAILED = new \stdClass();
        $this->peg_cachedPosDetails = new pegCachedPosDetails();
        $this->peg_e0 = new pegExpectation("any", "any character");
        $this->peg_e1 = new pegExpectation("literal", "\"<!--\"", "<!--", "false");
        $this->peg_e2 = new pegExpectation("literal", "\"more\"", "more", "false");
        $this->peg_e3 = new pegExpectation("literal", "\"-->\"", "-->", "false");
        $this->peg_e4 = new pegExpectation("literal", "\"<!--noteaser-->\"", "<!--noteaser-->", "false");
        $this->peg_e5 = new pegExpectation("literal", "\"wp:\"", "wp:", "false");
        $this->peg_e6 = new pegExpectation("literal", "\"/-->\"", "/-->", "false");
        $this->peg_e7 = new pegExpectation("literal", "\"/wp:\"", "/wp:", "false");
        $this->peg_e8 = new pegExpectation("literal", "\"/\"", "/", "false");
        $this->peg_e9 = new pegExpectation("class", "[a-z]", "[a-z]", "false");
        $this->peg_e10 = new pegExpectation("class", "[a-z0-9_-]", "[a-z0-9_-]", "false");
        $this->peg_e11 = new pegExpectation("literal", "\"{\"", "{", "false");
        $this->peg_e12 = new pegExpectation("literal", "\"}\"", "}", "false");
        $this->peg_e13 = new pegExpectation("class", "[ \\t\\r\\n]", "[ \t\r\n]", "false");
    }

    // The `maybeJSON` function is not needed in PHP because its return semantics
    // are the same as `json_decode`

    // array arguments are backwards because of PHP
    private function peg_array_partition(array $array, callable $predicate): array
    {
        $truthy = [];
        $falsey = [];

        foreach ($array as $item) {
            \call_user_func($predicate, $item)
                ? $truthy[] = $item
                : $falsey[] = $item;
        }

        return [$truthy, $falsey];
    }

    private function peg_join_blocks(string $pre, array $tokens, string $post): array
    {
        $blocks = [];

        if (!empty($pre)) {
            $blocks[] = ['attrs' => [], 'innerHTML' => $pre];
        }

        foreach ($tokens as $token) {
            [$token, $html] = $token;

            $blocks[] = $token;

            if (!empty($html)) {
                $blocks[] = ['attrs' => [], 'innerHTML' => $html];
            }
        }

        if (!empty($post)) {
            $blocks[] = ['attrs' => [], 'innerHTML' => $post];
        }

        return $blocks;
    }

    /**
     * @param string|string[] $input
     * @param mixed[] $args
     * @throws \Exception
     * @throws SyntaxError
     */
    public function parse(
        $input,
        array ...$args
    ): mixed {
        $this->peg_cleanup_state();
        $this->options = $args[0] ?? [];
        if (\is_array($input)) {
            $this->input = $input;
        } else {
            \preg_match_all("/./us", $input, $match);
            $this->input = $match[0];
        }
        $this->input_length = \count($this->input);
        $this->peg_source = $this->options["grammarSource"] ?? "";

        if (method_exists($this, 'initialize')) {
            $this->initialize();
        }

        $peg_startRuleFunctions = ["Block_List" => [$this, "peg_parse_Block_List"]];
        $peg_startRuleFunction = [$this, "peg_parse_Block_List"];
        if (isset($this->options["startRule"])) {
            if (!isset($peg_startRuleFunctions[$this->options["startRule"]])) {
                throw new \Exception("Can't start parsing from rule \"" . $this->options["startRule"] . "\".");
            }

            $peg_startRuleFunction = $peg_startRuleFunctions[$this->options["startRule"]];
        }

        /* @var mixed $peg_result */
        $peg_result = \call_user_func($peg_startRuleFunction);

        if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === $this->input_length) {
            $this->peg_cleanup_state();
            return $peg_result;
        }
        if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < $this->input_length) {
            $this->peg_fail(new pegExpectation("end", "end of input"));
        }

        $exception = $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
        $this->peg_cleanup_state();
        throw $exception;
    }

    private function peg_cleanup_state(): void
    {
        $this->peg_currPos = 0;
        $this->peg_reportedPos = 0;
        $this->peg_cachedPos = 0;
        $this->peg_cachedPosDetails = new pegCachedPosDetails();
        $this->peg_maxFailPos = 0;
        $this->peg_maxFailExpected = [];
        $this->peg_silentFails = 0;
        $this->input = [];
        $this->input_length = 0;
        $this->options = [];
        $this->peg_source = "";
    }

    private function input_substr(
        int $start,
        int $length
    ): string {
        if ($length === 1 && $start < $this->input_length) {
            return $this->input[$start];
        }
        $substr = "";
        $max = \min($start + $length, $this->input_length);
        for ($i = $start; $i < $max; $i++) {
            $substr .= $this->input[$i];
        }
        return $substr;
    }

    private function text(): string
    {
        return $this->input_substr($this->peg_reportedPos, $this->peg_currPos - $this->peg_reportedPos);
    }

    private function offset(): int
    {
        return $this->peg_reportedPos;
    }

    private function range(): pegRange
    {
        return new pegRange($this->peg_source, $this->peg_reportedPos, $this->peg_currPos);
    }

    private function location(
        bool $fail = false
    ): pegLocation {
        $start = $this->peg_reportedPos;
        $end = $this->peg_currPos;
        if ($fail) {
            $start = $this->peg_maxFailPos;
            $end = $this->peg_maxFailPos + ($this->peg_maxFailPos < \count($this->input) ? 1 : 0);
        }
        $compute_pd_start = clone $this->peg_computePosDetails($start);
        $compute_pd_end = clone $this->peg_computePosDetails($end);

        return new pegLocation(
            $this->peg_source,
            new pegPosition($start, $compute_pd_start->line, $compute_pd_start->column),
            new pegPosition($end, $compute_pd_end->line, $compute_pd_end->column),
        );
    }

    private function line(): int
    {
        return $this->peg_computePosDetails($this->peg_reportedPos)->line;
    }

    private function column(): int
    {
        return $this->peg_computePosDetails($this->peg_reportedPos)->column;
    }

    /**
     * @throws SyntaxError
     */
    private function expected(
        string $description,
        ?int $where = null
    ): void {
        throw $this->peg_buildException(
            null,
            [new pegExpectation("other", $description)],
            $where ?? $this->peg_reportedPos
        );
    }

    /**
     * @throws SyntaxError
     */
    private function error(
        string $message,
        ?int $where = null
    ): void {
        throw $this->peg_buildException(
            $message,
            null,
            $where ?? $this->peg_reportedPos,
        );
    }

    private function peg_advancePos(
        pegCachedPosDetails $details,
        int $startPos,
        int $endPos
    ): void {
        for ($p = $startPos; $p < $endPos; $p++) {
            $ch = $this->input_substr($p, 1);
            if ($ch === "\n") {
                if (!$details->seenCR) {
                    $details->line++;
                }
                $details->column = 1;
                $details->seenCR = false;
            } elseif ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
                $details->line++;
                $details->column = 1;
                $details->seenCR = true;
            } else {
                $details->column++;
                $details->seenCR = false;
            }
        }
    }

    private function peg_computePosDetails(
        int $pos
    ): pegCachedPosDetails {
        if ($this->peg_cachedPos !== $pos) {
            if ($this->peg_cachedPos > $pos) {
                $this->peg_cachedPos = 0;
                $this->peg_cachedPosDetails = new pegCachedPosDetails();
            }
            $this->peg_advancePos($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
            $this->peg_cachedPos = $pos;
        }

        return $this->peg_cachedPosDetails;
    }

    private function peg_fail(
        pegExpectation $expected
    ): void {
        if ($this->peg_currPos < $this->peg_maxFailPos) {
            return;
        }

        if ($this->peg_currPos > $this->peg_maxFailPos) {
            $this->peg_maxFailPos = $this->peg_currPos;
            $this->peg_maxFailExpected = [];
        }

        $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_buildException_expectedComparator(
        pegExpectation $a,
        pegExpectation $b
    ): int {
        return $a->description <=> $b->description;
    }

    /** @param pegExpectation[]|null $expected */
    private function peg_buildException(
        ?string $message,
        ?array $expected,
        int $pos
    ): SyntaxError {
        $posDetails = $this->peg_computePosDetails($pos);
        $found = $pos < $this->input_length ? $this->input[$pos] : null;

        if ($expected !== null) {
            \usort($expected, [$this, "peg_buildException_expectedComparator"]);
            $i = 1;
            while ($i < \count($expected)) {
                if ($expected[$i - 1] === $expected[$i]) {
                    \array_splice($expected, $i, 1);
                } else {
                    $i++;
                }
            }
        }

        if ($message === null && $expected !== null) {
            $expectedDescs = \array_fill(0, \count($expected), null);

            for ($i = 0; $i < \count($expected); $i++) {
                $expectedDescs[$i] = $expected[$i]->description;
            }

            $expectedDesc = \count($expected) > 1
                ? join(", ", \array_slice($expectedDescs, 0, -1))
                    . " or "
                    . ($expectedDescs[\count($expected) - 1] ?? "")
                : $expectedDescs[0] ?? "";

            $foundDesc = $found ? \json_encode($found) : "end of input";

            $message = "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
        }

        return new SyntaxError(
            $message,
            $expected,
            $found ?? "",
            $pos,
            $posDetails->line,
            $posDetails->column,
            $this->location(true)
        );
    }

    private function peg_f0(
        mixed $pre,
        mixed $t,
        mixed $html,
    ): mixed {
        return [$t, $html];
    }

    private function peg_f1(
        mixed $pre,
        mixed $ts,
        mixed $post,
    ): mixed {
        return $this->peg_join_blocks($pre, $ts, $post);
    }

    private function peg_f2(
        mixed $customText,
        mixed $noTeaser,
    ): mixed {
        $attrs = ['noTeaser' => (bool) $noTeaser];
        if (!empty($customText)) {
            $attrs['customText'] = $customText;
        }
        return [
            'blockName' => 'core/more',
            'attrs' => $attrs,
            'innerHTML' => '',
            'outerHTML' => $this->text(),
        ];
    }

    private function peg_f3(
        mixed $blockName,
        mixed $attrs,
    ): mixed {
        return [
            'blockName'  => $blockName,
            'attrs'      => $attrs,
            'innerBlocks' => [],
            'innerHTML' => '',
            'outerHTML' => $this->text(),
        ];
    }

    private function peg_f4(
        mixed $s,
        mixed $children,
        mixed $e,
    ): mixed {
        [$innerHTML, $innerBlocks] = $this->peg_array_partition($children, 'is_string');

        return [
            'blockName'  => $s['blockName'],
            'attrs'      => $s['attrs'],
            'innerBlocks'  => $innerBlocks,
            'innerHTML'  => \implode('', $innerHTML),
            'outerHTML' => $this->text(),
        ];
    }

    private function peg_f5(
        mixed $blockName,
        mixed $attrs,
    ): mixed {
        return [
            'blockName' => $blockName,
            'attrs'     => $attrs,
        ];
    }

    private function peg_f6(
        mixed $blockName,
    ): mixed {
        return [
            'blockName' => $blockName,
        ];
    }

    private function peg_f7(
        mixed $type,
    ): mixed {
        return "core/$type";
    }

    private function peg_f8(
        mixed $attrs,
    ): mixed {
        return \json_decode($attrs, true);
    }

    private function peg_parse_Block_List(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $s2 = [];
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_currPos;
        $this->peg_silentFails++;
        $s5 = $this->peg_parse_Token();
        $this->peg_silentFails--;
        if ($s5 === $this->peg_FAILED) {
            $s4 = null;
        } else {
            $this->peg_currPos = $s4;
            $s4 = $this->peg_FAILED;
        }
        if ($s4 !== $this->peg_FAILED) {
            if ($this->input_length > $this->peg_currPos) {
                $s5 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e0);
                }
            }
            if ($s5 !== $this->peg_FAILED) {
                $s4 = [$s4, $s5];
                $s3 = $s4;
            } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
        }
        while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            $s3 = $this->peg_currPos;
            $s4 = $this->peg_currPos;
            $this->peg_silentFails++;
            $s5 = $this->peg_parse_Token();
            $this->peg_silentFails--;
            if ($s5 === $this->peg_FAILED) {
                $s4 = null;
            } else {
                $this->peg_currPos = $s4;
                $s4 = $this->peg_FAILED;
            }
            if ($s4 !== $this->peg_FAILED) {
                if ($this->input_length > $this->peg_currPos) {
                    $s5 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s5 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e0);
                    }
                }
                if ($s5 !== $this->peg_FAILED) {
                    $s4 = [$s4, $s5];
                    $s3 = $s4;
                } else {
                    $this->peg_currPos = $s3;
                    $s3 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
            }
        }
        $s1 = $this->input_substr($s1, $this->peg_currPos - $s1);
        $s2 = [];
        $s3 = $this->peg_currPos;
        $s4 = $this->peg_parse_Token();
        if ($s4 !== $this->peg_FAILED) {
            $s5 = $this->peg_currPos;
            $s6 = [];
            $s7 = $this->peg_currPos;
            $s8 = $this->peg_currPos;
            $this->peg_silentFails++;
            $s9 = $this->peg_parse_Token();
            $this->peg_silentFails--;
            if ($s9 === $this->peg_FAILED) {
                $s8 = null;
            } else {
                $this->peg_currPos = $s8;
                $s8 = $this->peg_FAILED;
            }
            if ($s8 !== $this->peg_FAILED) {
                if ($this->input_length > $this->peg_currPos) {
                    $s9 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s9 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e0);
                    }
                }
                if ($s9 !== $this->peg_FAILED) {
                    $s8 = [$s8, $s9];
                    $s7 = $s8;
                } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s7;
                $s7 = $this->peg_FAILED;
            }
            while ($s7 !== $this->peg_FAILED) {
                $s6[] = $s7;
                $s7 = $this->peg_currPos;
                $s8 = $this->peg_currPos;
                $this->peg_silentFails++;
                $s9 = $this->peg_parse_Token();
                $this->peg_silentFails--;
                if ($s9 === $this->peg_FAILED) {
                    $s8 = null;
                } else {
                    $this->peg_currPos = $s8;
                    $s8 = $this->peg_FAILED;
                }
                if ($s8 !== $this->peg_FAILED) {
                    if ($this->input_length > $this->peg_currPos) {
                        $s9 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s9 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e0);
                        }
                    }
                    if ($s9 !== $this->peg_FAILED) {
                        $s8 = [$s8, $s9];
                        $s7 = $s8;
                    } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                }
            }
            $s5 = $this->input_substr($s5, $this->peg_currPos - $s5);
            $this->peg_reportedPos = $s3;
            $s3 = $this->peg_f0($s1, $s4, $s5);
        } else {
            $this->peg_currPos = $s3;
            $s3 = $this->peg_FAILED;
        }
        while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            $s3 = $this->peg_currPos;
            $s4 = $this->peg_parse_Token();
            if ($s4 !== $this->peg_FAILED) {
                $s5 = $this->peg_currPos;
                $s6 = [];
                $s7 = $this->peg_currPos;
                $s8 = $this->peg_currPos;
                $this->peg_silentFails++;
                $s9 = $this->peg_parse_Token();
                $this->peg_silentFails--;
                if ($s9 === $this->peg_FAILED) {
                    $s8 = null;
                } else {
                    $this->peg_currPos = $s8;
                    $s8 = $this->peg_FAILED;
                }
                if ($s8 !== $this->peg_FAILED) {
                    if ($this->input_length > $this->peg_currPos) {
                        $s9 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s9 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e0);
                        }
                    }
                    if ($s9 !== $this->peg_FAILED) {
                        $s8 = [$s8, $s9];
                        $s7 = $s8;
                    } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                }
                while ($s7 !== $this->peg_FAILED) {
                    $s6[] = $s7;
                    $s7 = $this->peg_currPos;
                    $s8 = $this->peg_currPos;
                    $this->peg_silentFails++;
                    $s9 = $this->peg_parse_Token();
                    $this->peg_silentFails--;
                    if ($s9 === $this->peg_FAILED) {
                        $s8 = null;
                    } else {
                        $this->peg_currPos = $s8;
                        $s8 = $this->peg_FAILED;
                    }
                    if ($s8 !== $this->peg_FAILED) {
                        if ($this->input_length > $this->peg_currPos) {
                            $s9 = $this->input_substr($this->peg_currPos, 1);
                            $this->peg_currPos++;
                        } else {
                            $s9 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_e0);
                            }
                        }
                        if ($s9 !== $this->peg_FAILED) {
                            $s8 = [$s8, $s9];
                            $s7 = $s8;
                        } else {
                            $this->peg_currPos = $s7;
                            $s7 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                    }
                }
                $s5 = $this->input_substr($s5, $this->peg_currPos - $s5);
                $this->peg_reportedPos = $s3;
                $s3 = $this->peg_f0($s1, $s4, $s5);
            } else {
                $this->peg_currPos = $s3;
                $s3 = $this->peg_FAILED;
            }
        }
        $s3 = $this->peg_currPos;
        $s4 = [];
        if ($this->input_length > $this->peg_currPos) {
            $s5 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
        } else {
            $s5 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e0);
            }
        }
        while ($s5 !== $this->peg_FAILED) {
            $s4[] = $s5;
            if ($this->input_length > $this->peg_currPos) {
                $s5 = $this->input_substr($this->peg_currPos, 1);
                $this->peg_currPos++;
            } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e0);
                }
            }
        }
        $s3 = $this->input_substr($s3, $this->peg_currPos - $s3);
        $this->peg_reportedPos = $s0;
        $s0 = $this->peg_f1($s1, $s2, $s3);

        return $s0;
    }

    private function peg_parse_Token(): mixed
    {
        $s0 = $this->peg_parse_Tag_More();
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parse_Block_Void();
            if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_parse_Block_Balanced();
            }
        }

        return $s0;
    }

    private function peg_parse_Tag_More(): mixed
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 4) === $this->peg_l0) {
            $s1 = $this->peg_l0;
            $this->peg_currPos += 4;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e1);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = [];
            $s3 = $this->peg_parse_WS();
            while ($s3 !== $this->peg_FAILED) {
                $s2[] = $s3;
                $s3 = $this->peg_parse_WS();
            }
            if ($this->input_substr($this->peg_currPos, 4) === $this->peg_l1) {
                $s3 = $this->peg_l1;
                $this->peg_currPos += 4;
            } else {
                $s3 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e2);
                }
            }
            if ($s3 !== $this->peg_FAILED) {
                $s4 = $this->peg_currPos;
                $s5 = [];
                $s6 = $this->peg_parse_WS();
                if ($s6 !== $this->peg_FAILED) {
                    while ($s6 !== $this->peg_FAILED) {
                        $s5[] = $s6;
                        $s6 = $this->peg_parse_WS();
                    }
                } else {
                    $s5 = $this->peg_FAILED;
                }
                if ($s5 !== $this->peg_FAILED) {
                    $s6 = $this->peg_currPos;
                    $s7 = [];
                    $s8 = $this->peg_currPos;
                    $s9 = $this->peg_currPos;
                    $this->peg_silentFails++;
                    $s10 = $this->peg_currPos;
                    $s11 = [];
                    $s12 = $this->peg_parse_WS();
                    while ($s12 !== $this->peg_FAILED) {
                        $s11[] = $s12;
                        $s12 = $this->peg_parse_WS();
                    }
                    if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l2) {
                        $s12 = $this->peg_l2;
                        $this->peg_currPos += 3;
                    } else {
                        $s12 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e3);
                        }
                    }
                    if ($s12 !== $this->peg_FAILED) {
                        $s11 = [$s11, $s12];
                        $s10 = $s11;
                    } else {
                        $this->peg_currPos = $s10;
                        $s10 = $this->peg_FAILED;
                    }
                    $this->peg_silentFails--;
                    if ($s10 === $this->peg_FAILED) {
                        $s9 = null;
                    } else {
                        $this->peg_currPos = $s9;
                        $s9 = $this->peg_FAILED;
                    }
                    if ($s9 !== $this->peg_FAILED) {
                        if ($this->input_length > $this->peg_currPos) {
                            $s10 = $this->input_substr($this->peg_currPos, 1);
                            $this->peg_currPos++;
                        } else {
                            $s10 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_e0);
                            }
                        }
                        if ($s10 !== $this->peg_FAILED) {
                            $s9 = [$s9, $s10];
                            $s8 = $s9;
                        } else {
                            $this->peg_currPos = $s8;
                            $s8 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s8;
                        $s8 = $this->peg_FAILED;
                    }
                    if ($s8 !== $this->peg_FAILED) {
                        while ($s8 !== $this->peg_FAILED) {
                            $s7[] = $s8;
                            $s8 = $this->peg_currPos;
                            $s9 = $this->peg_currPos;
                            $this->peg_silentFails++;
                            $s10 = $this->peg_currPos;
                            $s11 = [];
                            $s12 = $this->peg_parse_WS();
                            while ($s12 !== $this->peg_FAILED) {
                                $s11[] = $s12;
                                $s12 = $this->peg_parse_WS();
                            }
                            if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l2) {
                                $s12 = $this->peg_l2;
                                $this->peg_currPos += 3;
                            } else {
                                $s12 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) {
                                    $this->peg_fail($this->peg_e3);
                                }
                            }
                            if ($s12 !== $this->peg_FAILED) {
                                $s11 = [$s11, $s12];
                                $s10 = $s11;
                            } else {
                                $this->peg_currPos = $s10;
                                $s10 = $this->peg_FAILED;
                            }
                            $this->peg_silentFails--;
                            if ($s10 === $this->peg_FAILED) {
                                $s9 = null;
                            } else {
                                $this->peg_currPos = $s9;
                                $s9 = $this->peg_FAILED;
                            }
                            if ($s9 !== $this->peg_FAILED) {
                                if ($this->input_length > $this->peg_currPos) {
                                    $s10 = $this->input_substr($this->peg_currPos, 1);
                                    $this->peg_currPos++;
                                } else {
                                    $s10 = $this->peg_FAILED;
                                    if ($this->peg_silentFails === 0) {
                                        $this->peg_fail($this->peg_e0);
                                    }
                                }
                                if ($s10 !== $this->peg_FAILED) {
                                    $s9 = [$s9, $s10];
                                    $s8 = $s9;
                                } else {
                                    $this->peg_currPos = $s8;
                                    $s8 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s8;
                                $s8 = $this->peg_FAILED;
                            }
                        }
                    } else {
                        $s7 = $this->peg_FAILED;
                    }
                    if ($s7 !== $this->peg_FAILED) {
                        $s6 = $this->input_substr($s6, $this->peg_currPos - $s6);
                    } else {
                        $s6 = $s7;
                    }
                    if ($s6 !== $this->peg_FAILED) {
                        $s4 = $s6;
                    } else {
                        $this->peg_currPos = $s4;
                        $s4 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s4;
                    $s4 = $this->peg_FAILED;
                }
                if ($s4 === $this->peg_FAILED) {
                    $s4 = null;
                }
                $s5 = [];
                $s6 = $this->peg_parse_WS();
                while ($s6 !== $this->peg_FAILED) {
                    $s5[] = $s6;
                    $s6 = $this->peg_parse_WS();
                }
                if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l2) {
                    $s6 = $this->peg_l2;
                    $this->peg_currPos += 3;
                } else {
                    $s6 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e3);
                    }
                }
                if ($s6 !== $this->peg_FAILED) {
                    $s7 = $this->peg_currPos;
                    $s8 = [];
                    $s9 = $this->peg_parse_WS();
                    while ($s9 !== $this->peg_FAILED) {
                        $s8[] = $s9;
                        $s9 = $this->peg_parse_WS();
                    }
                    if ($this->input_substr($this->peg_currPos, 15) === $this->peg_l3) {
                        $s9 = $this->peg_l3;
                        $this->peg_currPos += 15;
                    } else {
                        $s9 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e4);
                        }
                    }
                    if ($s9 !== $this->peg_FAILED) {
                        $s8 = [$s8, $s9];
                        $s7 = $s8;
                    } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                    }
                    if ($s7 === $this->peg_FAILED) {
                        $s7 = null;
                    }
                    $this->peg_reportedPos = $s0;
                    $s0 = $this->peg_f2($s4, $s7);
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_Block_Void(): mixed
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 4) === $this->peg_l0) {
            $s1 = $this->peg_l0;
            $this->peg_currPos += 4;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e1);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = [];
            $s3 = $this->peg_parse_WS();
            if ($s3 !== $this->peg_FAILED) {
                while ($s3 !== $this->peg_FAILED) {
                    $s2[] = $s3;
                    $s3 = $this->peg_parse_WS();
                }
            } else {
                $s2 = $this->peg_FAILED;
            }
            if ($s2 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l4) {
                    $s3 = $this->peg_l4;
                    $this->peg_currPos += 3;
                } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e5);
                    }
                }
                if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parse_Block_Name();
                    if ($s4 !== $this->peg_FAILED) {
                        $s5 = [];
                        $s6 = $this->peg_parse_WS();
                        if ($s6 !== $this->peg_FAILED) {
                            while ($s6 !== $this->peg_FAILED) {
                                $s5[] = $s6;
                                $s6 = $this->peg_parse_WS();
                            }
                        } else {
                            $s5 = $this->peg_FAILED;
                        }
                        if ($s5 !== $this->peg_FAILED) {
                            $s6 = $this->peg_currPos;
                            $s7 = $this->peg_parse_Block_Attributes();
                            if ($s7 !== $this->peg_FAILED) {
                                $s8 = [];
                                $s9 = $this->peg_parse_WS();
                                if ($s9 !== $this->peg_FAILED) {
                                    while ($s9 !== $this->peg_FAILED) {
                                        $s8[] = $s9;
                                        $s9 = $this->peg_parse_WS();
                                    }
                                } else {
                                    $s8 = $this->peg_FAILED;
                                }
                                if ($s8 !== $this->peg_FAILED) {
                                    $s6 = $s7;
                                } else {
                                    $this->peg_currPos = $s6;
                                    $s6 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s6;
                                $s6 = $this->peg_FAILED;
                            }
                            if ($s6 === $this->peg_FAILED) {
                                $s6 = null;
                            }
                            if ($this->input_substr($this->peg_currPos, 4) === $this->peg_l5) {
                                $s7 = $this->peg_l5;
                                $this->peg_currPos += 4;
                            } else {
                                $s7 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) {
                                    $this->peg_fail($this->peg_e6);
                                }
                            }
                            if ($s7 !== $this->peg_FAILED) {
                                $this->peg_reportedPos = $s0;
                                $s0 = $this->peg_f3($s4, $s6);
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_Block_Balanced(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_Block_Start();
        if ($s1 !== $this->peg_FAILED) {
            $s2 = [];
            $s3 = $this->peg_parse_Token();
            if ($s3 === $this->peg_FAILED) {
                $s3 = $this->peg_currPos;
                $s4 = $this->peg_currPos;
                $s5 = $this->peg_currPos;
                $this->peg_silentFails++;
                $s6 = $this->peg_parse_Block_End();
                $this->peg_silentFails--;
                if ($s6 === $this->peg_FAILED) {
                    $s5 = null;
                } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_FAILED;
                }
                if ($s5 !== $this->peg_FAILED) {
                    if ($this->input_length > $this->peg_currPos) {
                        $s6 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s6 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e0);
                        }
                    }
                    if ($s6 !== $this->peg_FAILED) {
                        $s5 = [$s5, $s6];
                        $s4 = $s5;
                    } else {
                        $this->peg_currPos = $s4;
                        $s4 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s4;
                    $s4 = $this->peg_FAILED;
                }
                if ($s4 !== $this->peg_FAILED) {
                    $s3 = $this->input_substr($s3, $this->peg_currPos - $s3);
                } else {
                    $s3 = $s4;
                }
            }
            while ($s3 !== $this->peg_FAILED) {
                $s2[] = $s3;
                $s3 = $this->peg_parse_Token();
                if ($s3 === $this->peg_FAILED) {
                    $s3 = $this->peg_currPos;
                    $s4 = $this->peg_currPos;
                    $s5 = $this->peg_currPos;
                    $this->peg_silentFails++;
                    $s6 = $this->peg_parse_Block_End();
                    $this->peg_silentFails--;
                    if ($s6 === $this->peg_FAILED) {
                        $s5 = null;
                    } else {
                        $this->peg_currPos = $s5;
                        $s5 = $this->peg_FAILED;
                    }
                    if ($s5 !== $this->peg_FAILED) {
                        if ($this->input_length > $this->peg_currPos) {
                            $s6 = $this->input_substr($this->peg_currPos, 1);
                            $this->peg_currPos++;
                        } else {
                            $s6 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_e0);
                            }
                        }
                        if ($s6 !== $this->peg_FAILED) {
                            $s5 = [$s5, $s6];
                            $s4 = $s5;
                        } else {
                            $this->peg_currPos = $s4;
                            $s4 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s4;
                        $s4 = $this->peg_FAILED;
                    }
                    if ($s4 !== $this->peg_FAILED) {
                        $s3 = $this->input_substr($s3, $this->peg_currPos - $s3);
                    } else {
                        $s3 = $s4;
                    }
                }
            }
            $s3 = $this->peg_parse_Block_End();
            if ($s3 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s0 = $this->peg_f4($s1, $s2, $s3);
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_Block_Start(): mixed
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 4) === $this->peg_l0) {
            $s1 = $this->peg_l0;
            $this->peg_currPos += 4;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e1);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = [];
            $s3 = $this->peg_parse_WS();
            if ($s3 !== $this->peg_FAILED) {
                while ($s3 !== $this->peg_FAILED) {
                    $s2[] = $s3;
                    $s3 = $this->peg_parse_WS();
                }
            } else {
                $s2 = $this->peg_FAILED;
            }
            if ($s2 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l4) {
                    $s3 = $this->peg_l4;
                    $this->peg_currPos += 3;
                } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e5);
                    }
                }
                if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parse_Block_Name();
                    if ($s4 !== $this->peg_FAILED) {
                        $s5 = [];
                        $s6 = $this->peg_parse_WS();
                        if ($s6 !== $this->peg_FAILED) {
                            while ($s6 !== $this->peg_FAILED) {
                                $s5[] = $s6;
                                $s6 = $this->peg_parse_WS();
                            }
                        } else {
                            $s5 = $this->peg_FAILED;
                        }
                        if ($s5 !== $this->peg_FAILED) {
                            $s6 = $this->peg_currPos;
                            $s7 = $this->peg_parse_Block_Attributes();
                            if ($s7 !== $this->peg_FAILED) {
                                $s8 = [];
                                $s9 = $this->peg_parse_WS();
                                if ($s9 !== $this->peg_FAILED) {
                                    while ($s9 !== $this->peg_FAILED) {
                                        $s8[] = $s9;
                                        $s9 = $this->peg_parse_WS();
                                    }
                                } else {
                                    $s8 = $this->peg_FAILED;
                                }
                                if ($s8 !== $this->peg_FAILED) {
                                    $s6 = $s7;
                                } else {
                                    $this->peg_currPos = $s6;
                                    $s6 = $this->peg_FAILED;
                                }
                            } else {
                                $this->peg_currPos = $s6;
                                $s6 = $this->peg_FAILED;
                            }
                            if ($s6 === $this->peg_FAILED) {
                                $s6 = null;
                            }
                            if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l2) {
                                $s7 = $this->peg_l2;
                                $this->peg_currPos += 3;
                            } else {
                                $s7 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) {
                                    $this->peg_fail($this->peg_e3);
                                }
                            }
                            if ($s7 !== $this->peg_FAILED) {
                                $this->peg_reportedPos = $s0;
                                $s0 = $this->peg_f5($s4, $s6);
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_Block_End(): mixed
    {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 4) === $this->peg_l0) {
            $s1 = $this->peg_l0;
            $this->peg_currPos += 4;
        } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e1);
            }
        }
        if ($s1 !== $this->peg_FAILED) {
            $s2 = [];
            $s3 = $this->peg_parse_WS();
            if ($s3 !== $this->peg_FAILED) {
                while ($s3 !== $this->peg_FAILED) {
                    $s2[] = $s3;
                    $s3 = $this->peg_parse_WS();
                }
            } else {
                $s2 = $this->peg_FAILED;
            }
            if ($s2 !== $this->peg_FAILED) {
                if ($this->input_substr($this->peg_currPos, 4) === $this->peg_l6) {
                    $s3 = $this->peg_l6;
                    $this->peg_currPos += 4;
                } else {
                    $s3 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e7);
                    }
                }
                if ($s3 !== $this->peg_FAILED) {
                    $s4 = $this->peg_parse_Block_Name();
                    if ($s4 !== $this->peg_FAILED) {
                        $s5 = [];
                        $s6 = $this->peg_parse_WS();
                        if ($s6 !== $this->peg_FAILED) {
                            while ($s6 !== $this->peg_FAILED) {
                                $s5[] = $s6;
                                $s6 = $this->peg_parse_WS();
                            }
                        } else {
                            $s5 = $this->peg_FAILED;
                        }
                        if ($s5 !== $this->peg_FAILED) {
                            if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l2) {
                                $s6 = $this->peg_l2;
                                $this->peg_currPos += 3;
                            } else {
                                $s6 = $this->peg_FAILED;
                                if ($this->peg_silentFails === 0) {
                                    $this->peg_fail($this->peg_e3);
                                }
                            }
                            if ($s6 !== $this->peg_FAILED) {
                                $this->peg_reportedPos = $s0;
                                $s0 = $this->peg_f6($s4);
                            } else {
                                $this->peg_currPos = $s0;
                                $s0 = $this->peg_FAILED;
                            }
                        } else {
                            $this->peg_currPos = $s0;
                            $s0 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s0;
                        $s0 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
        }

        return $s0;
    }

    private function peg_parse_Block_Name(): mixed
    {
        $s0 = $this->peg_parse_Namespaced_Block_Name();
        if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parse_Core_Block_Name();
        }

        return $s0;
    }

    private function peg_parse_Namespaced_Block_Name(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $s2 = $this->peg_parse_Block_Name_Part();
        if ($s2 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l7) {
                $s3 = $this->peg_l7;
                $this->peg_currPos++;
            } else {
                $s3 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e8);
                }
            }
            if ($s3 !== $this->peg_FAILED) {
                $s4 = $this->peg_parse_Block_Name_Part();
                if ($s4 !== $this->peg_FAILED) {
                    $s2 = [$s2, $s3, $s4];
                    $s1 = $s2;
                } else {
                    $this->peg_currPos = $s1;
                    $s1 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s1;
                $s1 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
        }
        if ($s1 !== $this->peg_FAILED) {
            $s0 = $this->input_substr($s0, $this->peg_currPos - $s0);
        } else {
            $s0 = $s1;
        }

        return $s0;
    }

    private function peg_parse_Core_Block_Name(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $s2 = $this->peg_parse_Block_Name_Part();
        if ($s2 !== $this->peg_FAILED) {
            $s1 = $this->input_substr($s1, $this->peg_currPos - $s1);
        } else {
            $s1 = $s2;
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f7($s1);
        }
        $s0 = $s1;

        return $s0;
    }

    private function peg_parse_Block_Name_Part(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $s2 = $this->input_substr($this->peg_currPos, 1);
        if (peg_char_class_test($this->peg_c0, $s2)) {
            $this->peg_currPos++;
        } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e9);
            }
        }
        if ($s2 !== $this->peg_FAILED) {
            $s3 = [];
            $s4 = $this->input_substr($this->peg_currPos, 1);
            if (peg_char_class_test($this->peg_c1, $s4)) {
                $this->peg_currPos++;
            } else {
                $s4 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e10);
                }
            }
            while ($s4 !== $this->peg_FAILED) {
                $s3[] = $s4;
                $s4 = $this->input_substr($this->peg_currPos, 1);
                if (peg_char_class_test($this->peg_c1, $s4)) {
                    $this->peg_currPos++;
                } else {
                    $s4 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e10);
                    }
                }
            }
            $s2 = [$s2, $s3];
            $s1 = $s2;
        } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
        }
        if ($s1 !== $this->peg_FAILED) {
            $s0 = $this->input_substr($s0, $this->peg_currPos - $s0);
        } else {
            $s0 = $s1;
        }

        return $s0;
    }

    private function peg_parse_Block_Attributes(): mixed
    {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_currPos;
        $s2 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l8) {
            $s3 = $this->peg_l8;
            $this->peg_currPos++;
        } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e11);
            }
        }
        if ($s3 !== $this->peg_FAILED) {
            $s4 = [];
            $s5 = $this->peg_currPos;
            $s6 = $this->peg_currPos;
            $this->peg_silentFails++;
            $s7 = $this->peg_currPos;
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l9) {
                $s8 = $this->peg_l9;
                $this->peg_currPos++;
            } else {
                $s8 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e12);
                }
            }
            if ($s8 !== $this->peg_FAILED) {
                $s9 = [];
                $s10 = $this->peg_parse_WS();
                if ($s10 !== $this->peg_FAILED) {
                    while ($s10 !== $this->peg_FAILED) {
                        $s9[] = $s10;
                        $s10 = $this->peg_parse_WS();
                    }
                } else {
                    $s9 = $this->peg_FAILED;
                }
                if ($s9 !== $this->peg_FAILED) {
                    $s10 = "";
                    if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l7) {
                        $s11 = $this->peg_l7;
                        $this->peg_currPos++;
                    } else {
                        $s11 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e8);
                        }
                    }
                    if ($s11 === $this->peg_FAILED) {
                        $s11 = null;
                    }
                    if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l2) {
                        $s12 = $this->peg_l2;
                        $this->peg_currPos += 3;
                    } else {
                        $s12 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e3);
                        }
                    }
                    if ($s12 !== $this->peg_FAILED) {
                        $s8 = [$s8, $s9, $s10, $s11, $s12];
                        $s7 = $s8;
                    } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s7;
                $s7 = $this->peg_FAILED;
            }
            $this->peg_silentFails--;
            if ($s7 === $this->peg_FAILED) {
                $s6 = null;
            } else {
                $this->peg_currPos = $s6;
                $s6 = $this->peg_FAILED;
            }
            if ($s6 !== $this->peg_FAILED) {
                if ($this->input_length > $this->peg_currPos) {
                    $s7 = $this->input_substr($this->peg_currPos, 1);
                    $this->peg_currPos++;
                } else {
                    $s7 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e0);
                    }
                }
                if ($s7 !== $this->peg_FAILED) {
                    $s6 = [$s6, $s7];
                    $s5 = $s6;
                } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_FAILED;
                }
            } else {
                $this->peg_currPos = $s5;
                $s5 = $this->peg_FAILED;
            }
            while ($s5 !== $this->peg_FAILED) {
                $s4[] = $s5;
                $s5 = $this->peg_currPos;
                $s6 = $this->peg_currPos;
                $this->peg_silentFails++;
                $s7 = $this->peg_currPos;
                if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l9) {
                    $s8 = $this->peg_l9;
                    $this->peg_currPos++;
                } else {
                    $s8 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_e12);
                    }
                }
                if ($s8 !== $this->peg_FAILED) {
                    $s9 = [];
                    $s10 = $this->peg_parse_WS();
                    if ($s10 !== $this->peg_FAILED) {
                        while ($s10 !== $this->peg_FAILED) {
                            $s9[] = $s10;
                            $s10 = $this->peg_parse_WS();
                        }
                    } else {
                        $s9 = $this->peg_FAILED;
                    }
                    if ($s9 !== $this->peg_FAILED) {
                        $s10 = "";
                        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l7) {
                            $s11 = $this->peg_l7;
                            $this->peg_currPos++;
                        } else {
                            $s11 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_e8);
                            }
                        }
                        if ($s11 === $this->peg_FAILED) {
                            $s11 = null;
                        }
                        if ($this->input_substr($this->peg_currPos, 3) === $this->peg_l2) {
                            $s12 = $this->peg_l2;
                            $this->peg_currPos += 3;
                        } else {
                            $s12 = $this->peg_FAILED;
                            if ($this->peg_silentFails === 0) {
                                $this->peg_fail($this->peg_e3);
                            }
                        }
                        if ($s12 !== $this->peg_FAILED) {
                            $s8 = [$s8, $s9, $s10, $s11, $s12];
                            $s7 = $s8;
                        } else {
                            $this->peg_currPos = $s7;
                            $s7 = $this->peg_FAILED;
                        }
                    } else {
                        $this->peg_currPos = $s7;
                        $s7 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s7;
                    $s7 = $this->peg_FAILED;
                }
                $this->peg_silentFails--;
                if ($s7 === $this->peg_FAILED) {
                    $s6 = null;
                } else {
                    $this->peg_currPos = $s6;
                    $s6 = $this->peg_FAILED;
                }
                if ($s6 !== $this->peg_FAILED) {
                    if ($this->input_length > $this->peg_currPos) {
                        $s7 = $this->input_substr($this->peg_currPos, 1);
                        $this->peg_currPos++;
                    } else {
                        $s7 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_e0);
                        }
                    }
                    if ($s7 !== $this->peg_FAILED) {
                        $s6 = [$s6, $s7];
                        $s5 = $s6;
                    } else {
                        $this->peg_currPos = $s5;
                        $s5 = $this->peg_FAILED;
                    }
                } else {
                    $this->peg_currPos = $s5;
                    $s5 = $this->peg_FAILED;
                }
            }
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_l9) {
                $s5 = $this->peg_l9;
                $this->peg_currPos++;
            } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_e12);
                }
            }
            if ($s5 !== $this->peg_FAILED) {
                $s3 = [$s3, $s4, $s5];
                $s2 = $s3;
            } else {
                $this->peg_currPos = $s2;
                $s2 = $this->peg_FAILED;
            }
        } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
        }
        if ($s2 !== $this->peg_FAILED) {
            $s1 = $this->input_substr($s1, $this->peg_currPos - $s1);
        } else {
            $s1 = $s2;
        }
        if ($s1 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f8($s1);
        }
        $s0 = $s1;

        return $s0;
    }

    private function peg_parse_WS(): mixed
    {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        if (peg_char_class_test($this->peg_c2, $s0)) {
            $this->peg_currPos++;
        } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_e13);
            }
        }

        return $s0;
    }
};
